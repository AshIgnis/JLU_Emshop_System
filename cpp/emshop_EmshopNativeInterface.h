/* DO NOT EDIT THIS FILE - it is machine generated */
/* 
 * JLU Emshop System - Complete JNI Header File
 * 基于EmshopNativeInterface.java自动生成的完整JNI接口
 * 
 * 编译命令：
 * Windows: javac -h . -cp java/src/main/java emshop.EmshopNativeInterface
 * Linux:   javac -h . -cp java/src/main/java emshop.EmshopNativeInterface
 * 
 * 生成时间：2025-08-31
 * 版本：1.0.0
 */
#include <jni.h>

#ifndef _Included_emshop_EmshopNativeInterface
#define _Included_emshop_EmshopNativeInterface

#ifdef __cplusplus
extern "C" {
#endif

// ==================== 辅助宏定义 ====================
#define JNI_METHOD(returnType, methodName) \
    JNIEXPORT returnType JNICALL Java_emshop_EmshopNativeInterface_##methodName

#define SUCCESS_RESULT(data) "{\"success\":true,\"message\":\"操作成功\",\"data\":" data "}"
#define ERROR_RESULT(message) "{\"success\":false,\"message\":\"" message "\",\"error_code\":1001}"

// ==================== 基础用户管理接口 ====================

/*
 * Class:     emshop_EmshopNativeInterface
 * Method:    login
 * Signature: (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
 * Description: 用户登录验证
 * 
 * @param env JNI环境指针
 * @param cls Java类引用
 * @param username 用户名
 * @param password 密码（已加密）
 * @return JSON格式登录结果: {success: bool, message: string, data: {userId: long, token: string, userInfo: object}}
 */
JNI_METHOD(jstring, login)
  (JNIEnv *env, jclass cls, jstring username, jstring password);

/*
 * Class:     emshop_EmshopNativeInterface
 * Method:    register
 * Signature: (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
 * Description: 用户注册
 * 
 * @param env JNI环境指针
 * @param cls Java类引用
 * @param username 用户名（需唯一性检查）
 * @param password 密码（需要加密存储）
 * @param phone 手机号（验证格式）
 * @return JSON格式注册结果: {success: bool, message: string, data: {userId: long}}
 */
JNI_METHOD(jstring, register)
  (JNIEnv *env, jclass cls, jstring username, jstring password, jstring phone);

/*
 * Class:     emshop_EmshopNativeInterface
 * Method:    logout
 * Signature: (J)Ljava/lang/String;
 * Description: 用户登出
 * 
 * @param env JNI环境指针
 * @param cls Java类引用
 * @param userId 用户ID
 * @return JSON格式登出结果: {success: bool, message: string}
 */
JNI_METHOD(jstring, logout)
  (JNIEnv *env, jclass cls, jlong userId);

/*
 * Class:     emshop_EmshopNativeInterface
 * Method:    getUserInfo
 * Signature: (J)Ljava/lang/String;
 * Description: 获取用户信息
 * 
 * @param env JNI环境指针
 * @param cls Java类引用
 * @param userId 用户ID
 * @return JSON格式用户信息: {success: bool, data: {userId: long, username: string, phone: string, createTime: string}}
 */
JNI_METHOD(jstring, getUserInfo)
  (JNIEnv *env, jclass cls, jlong userId);

/*
 * Class:     emshop_EmshopNativeInterface
 * Method:    updateUserInfo
 * Signature: (JLjava/lang/String;)Ljava/lang/String;
 * Description: 更新用户信息
 * 
 * @param env JNI环境指针
 * @param cls Java类引用
 * @param userId 用户ID
 * @param jsonInfo JSON格式的用户信息: {phone: string, email: string, address: string}
 * @return JSON格式更新结果: {success: bool, message: string}
 */
JNI_METHOD(jstring, updateUserInfo)
  (JNIEnv *env, jclass cls, jlong userId, jstring jsonInfo);

// ==================== 商品管理接口 ====================

/*
 * Class:     emshop_EmshopNativeInterface
 * Method:    getProductList
 * Signature: (Ljava/lang/String;II)Ljava/lang/String;
 * Description: 获取商品列表（支持分页和分类筛选）
 * 
 * @param env JNI环境指针
 * @param cls Java类引用
 * @param category 商品分类（"all"表示所有分类）
 * @param page 页码（从1开始）
 * @param pageSize 每页数量（建议10-50）
 * @return JSON格式商品列表: {success: bool, data: {products: array, total: int, page: int, pageSize: int}}
 */
JNI_METHOD(jstring, getProductList)
  (JNIEnv *env, jclass cls, jstring category, jint page, jint pageSize);

/*
 * Class:     emshop_EmshopNativeInterface
 * Method:    getProductDetail
 * Signature: (J)Ljava/lang/String;
 * Description: 获取商品详情
 * 
 * @param env JNI环境指针
 * @param cls Java类引用
 * @param productId 商品ID
 * @return JSON格式商品详情: {success: bool, data: {productId: long, name: string, price: double, stock: int, description: string, images: array}}
 */
JNI_METHOD(jstring, getProductDetail)
  (JNIEnv *env, jclass cls, jlong productId);

/*
 * Class:     emshop_EmshopNativeInterface
 * Method:    addProduct
 * Signature: (Ljava/lang/String;)Ljava/lang/String;
 * Description: 添加商品（管理员功能）
 * 
 * @param env JNI环境指针
 * @param cls Java类引用
 * @param jsonProduct JSON格式商品信息: {name: string, price: double, stock: int, category: string, description: string}
 * @return JSON格式添加结果: {success: bool, message: string, data: {productId: long}}
 */
JNI_METHOD(jstring, addProduct)
  (JNIEnv *env, jclass cls, jstring jsonProduct);

/*
 * Class:     emshop_EmshopNativeInterface
 * Method:    updateProduct
 * Signature: (JLjava/lang/String;)Ljava/lang/String;
 * Description: 更新商品信息
 * 
 * @param env JNI环境指针
 * @param cls Java类引用
 * @param productId 商品ID
 * @param jsonProduct JSON格式更新信息
 * @return JSON格式更新结果: {success: bool, message: string}
 */
JNI_METHOD(jstring, updateProduct)
  (JNIEnv *env, jclass cls, jlong productId, jstring jsonProduct);

/*
 * Class:     emshop_EmshopNativeInterface
 * Method:    deleteProduct
 * Signature: (J)Ljava/lang/String;
 * Description: 删除商品（软删除）
 * 
 * @param env JNI环境指针
 * @param cls Java类引用
 * @param productId 商品ID
 * @return JSON格式删除结果: {success: bool, message: string}
 */
JNI_METHOD(jstring, deleteProduct)
  (JNIEnv *env, jclass cls, jlong productId);

/*
 * Class:     emshop_EmshopNativeInterface
 * Method:    getCategories
 * Signature: ()Ljava/lang/String;
 * Description: 获取商品分类列表
 * 
 * @param env JNI环境指针
 * @param cls Java类引用
 * @return JSON格式分类列表: {success: bool, data: {categories: array}}
 */
JNI_METHOD(jstring, getCategories)
  (JNIEnv *env, jclass cls);

/*
 * Class:     emshop_EmshopNativeInterface
 * Method:    getCategoryProducts
 * Signature: (Ljava/lang/String;IILjava/lang/String;)Ljava/lang/String;
 * Description: 获取分类下的商品
 * 
 * @param env JNI环境指针
 * @param cls Java类引用
 * @param category 分类名
 * @param page 页码
 * @param pageSize 每页数量
 * @param sortBy 排序方式（"price_asc", "price_desc", "name_asc", "sales_desc", "date_desc"）
 * @return JSON格式商品列表
 */
JNI_METHOD(jstring, getCategoryProducts)
  (JNIEnv *env, jclass cls, jstring category, jint page, jint pageSize, jstring sortBy);

/*
 * Class:     emshop_EmshopNativeInterface
 * Method:    searchProducts
 * Signature: (Ljava/lang/String;IILjava/lang/String;DD)Ljava/lang/String;
 * Description: 搜索商品（支持关键词、价格区间、排序）
 * 
 * @param env JNI环境指针
 * @param cls Java类引用
 * @param keyword 搜索关键词
 * @param page 页码
 * @param pageSize 每页数量
 * @param sortBy 排序方式
 * @param minPrice 最低价格（-1表示不限制）
 * @param maxPrice 最高价格（-1表示不限制）
 * @return JSON格式搜索结果
 */
JNI_METHOD(jstring, searchProducts)
  (JNIEnv *env, jclass cls, jstring keyword, jint page, jint pageSize, jstring sortBy, jdouble minPrice, jdouble maxPrice);

// ==================== 库存管理接口 ====================

/*
 * Class:     emshop_EmshopNativeInterface
 * Method:    updateStock
 * Signature: (JILjava/lang/String;)Ljava/lang/String;
 * Description: 更新库存（支持原子操作）
 * 
 * @param env JNI环境指针
 * @param cls Java类引用
 * @param productId 商品ID
 * @param quantity 数量
 * @param operation 操作类型（"add": 增加, "subtract": 减少, "set": 设置为指定值）
 * @return JSON格式更新结果: {success: bool, message: string, data: {newStock: int}}
 */
JNI_METHOD(jstring, updateStock)
  (JNIEnv *env, jclass cls, jlong productId, jint quantity, jstring operation);

/*
 * Class:     emshop_EmshopNativeInterface
 * Method:    checkStock
 * Signature: (J)Ljava/lang/String;
 * Description: 检查库存
 * 
 * @param env JNI环境指针
 * @param cls Java类引用
 * @param productId 商品ID
 * @return JSON格式库存信息: {success: bool, data: {productId: long, stock: int, reserved: int, available: int}}
 */
JNI_METHOD(jstring, checkStock)
  (JNIEnv *env, jclass cls, jlong productId);

/*
 * Class:     emshop_EmshopNativeInterface
 * Method:    getLowStockProducts
 * Signature: (I)Ljava/lang/String;
 * Description: 获取低库存商品
 * 
 * @param env JNI环境指针
 * @param cls Java类引用
 * @param threshold 库存阈值
 * @return JSON格式低库存商品列表: {success: bool, data: {products: array}}
 */
JNI_METHOD(jstring, getLowStockProducts)
  (JNIEnv *env, jclass cls, jint threshold);

// ==================== 购物车管理接口 ====================

/*
 * Class:     emshop_EmshopNativeInterface
 * Method:    addToCart
 * Signature: (JJI)Ljava/lang/String;
 * Description: 添加商品到购物车
 * 
 * @param env JNI环境指针
 * @param cls Java类引用
 * @param userId 用户ID
 * @param productId 商品ID
 * @param quantity 数量
 * @return JSON格式添加结果: {success: bool, message: string, data: {cartItemId: long}}
 */
JNI_METHOD(jstring, addToCart)
  (JNIEnv *env, jclass cls, jlong userId, jlong productId, jint quantity);

/*
 * Class:     emshop_EmshopNativeInterface
 * Method:    getCart
 * Signature: (J)Ljava/lang/String;
 * Description: 获取购物车内容
 * 
 * @param env JNI环境指针
 * @param cls Java类引用
 * @param userId 用户ID
 * @return JSON格式购物车内容: {success: bool, data: {items: array, totalItems: int, totalAmount: double}}
 */
JNI_METHOD(jstring, getCart)
  (JNIEnv *env, jclass cls, jlong userId);

/*
 * Class:     emshop_EmshopNativeInterface
 * Method:    removeFromCart
 * Signature: (JJ)Ljava/lang/String;
 * Description: 从购物车移除商品
 * 
 * @param env JNI环境指针
 * @param cls Java类引用
 * @param userId 用户ID
 * @param productId 商品ID
 * @return JSON格式移除结果: {success: bool, message: string}
 */
JNI_METHOD(jstring, removeFromCart)
  (JNIEnv *env, jclass cls, jlong userId, jlong productId);

/*
 * Class:     emshop_EmshopNativeInterface
 * Method:    updateCartItemQuantity
 * Signature: (JJI)Ljava/lang/String;
 * Description: 更新购物车商品数量
 * 
 * @param env JNI环境指针
 * @param cls Java类引用
 * @param userId 用户ID
 * @param productId 商品ID
 * @param quantity 新数量
 * @return JSON格式更新结果: {success: bool, message: string, data: {newQuantity: int}}
 */
JNI_METHOD(jstring, updateCartItemQuantity)
  (JNIEnv *env, jclass cls, jlong userId, jlong productId, jint quantity);

/*
 * Class:     emshop_EmshopNativeInterface
 * Method:    clearCart
 * Signature: (J)Ljava/lang/String;
 * Description: 清空购物车
 * 
 * @param env JNI环境指针
 * @param cls Java类引用
 * @param userId 用户ID
 * @return JSON格式清空结果: {success: bool, message: string}
 */
JNI_METHOD(jstring, clearCart)
  (JNIEnv *env, jclass cls, jlong userId);

/*
 * Class:     emshop_EmshopNativeInterface
 * Method:    getCartSummary
 * Signature: (J)Ljava/lang/String;
 * Description: 获取购物车摘要
 * 
 * @param env JNI环境指针
 * @param cls Java类引用
 * @param userId 用户ID
 * @return JSON格式购物车摘要: {success: bool, data: {itemCount: int, totalAmount: double, estimatedShipping: double}}
 */
JNI_METHOD(jstring, getCartSummary)
  (JNIEnv *env, jclass cls, jlong userId);

// ==================== 订单管理接口 ====================

/*
 * Class:     emshop_EmshopNativeInterface
 * Method:    checkout
 * Signature: (J)Ljava/lang/String;
 * Description: 结算购物车（创建订单）
 * 
 * @param env JNI环境指针
 * @param cls Java类引用
 * @param userId 用户ID
 * @return JSON格式结算结果: {success: bool, message: string, data: {orderId: long, totalAmount: double}}
 */
JNI_METHOD(jstring, checkout)
  (JNIEnv *env, jclass cls, jlong userId);

/*
 * Class:     emshop_EmshopNativeInterface
 * Method:    getOrderList
 * Signature: (J)Ljava/lang/String;
 * Description: 获取订单列表
 * 
 * @param env JNI环境指针
 * @param cls Java类引用
 * @param userId 用户ID
 * @return JSON格式订单列表: {success: bool, data: {orders: array}}
 */
JNI_METHOD(jstring, getOrderList)
  (JNIEnv *env, jclass cls, jlong userId);

/*
 * Class:     emshop_EmshopNativeInterface
 * Method:    getOrderDetail
 * Signature: (J)Ljava/lang/String;
 * Description: 获取订单详情
 * 
 * @param env JNI环境指针
 * @param cls Java类引用
 * @param orderId 订单ID
 * @return JSON格式订单详情: {success: bool, data: {order: object, items: array}}
 */
JNI_METHOD(jstring, getOrderDetail)
  (JNIEnv *env, jclass cls, jlong orderId);

/*
 * Class:     emshop_EmshopNativeInterface
 * Method:    cancelOrder
 * Signature: (JJ)Ljava/lang/String;
 * Description: 取消订单
 * 
 * @param env JNI环境指针
 * @param cls Java类引用
 * @param userId 用户ID
 * @param orderId 订单ID
 * @return JSON格式取消结果: {success: bool, message: string}
 */
JNI_METHOD(jstring, cancelOrder)
  (JNIEnv *env, jclass cls, jlong userId, jlong orderId);

/*
 * Class:     emshop_EmshopNativeInterface
 * Method:    updateOrderStatus
 * Signature: (JLjava/lang/String;)Ljava/lang/String;
 * Description: 更新订单状态
 * 
 * @param env JNI环境指针
 * @param cls Java类引用
 * @param orderId 订单ID
 * @param status 新状态（"pending", "paid", "shipping", "delivered", "cancelled", "refunded"）
 * @return JSON格式更新结果: {success: bool, message: string}
 */
JNI_METHOD(jstring, updateOrderStatus)
  (JNIEnv *env, jclass cls, jlong orderId, jstring status);

/*
 * Class:     emshop_EmshopNativeInterface
 * Method:    getOrdersByStatus
 * Signature: (JLjava/lang/String;)Ljava/lang/String;
 * Description: 根据状态获取订单
 * 
 * @param env JNI环境指针
 * @param cls Java类引用
 * @param userId 用户ID
 * @param status 订单状态
 * @return JSON格式订单列表
 */
JNI_METHOD(jstring, getOrdersByStatus)
  (JNIEnv *env, jclass cls, jlong userId, jstring status);

/*
 * Class:     emshop_EmshopNativeInterface
 * Method:    trackOrder
 * Signature: (J)Ljava/lang/String;
 * Description: 跟踪订单
 * 
 * @param env JNI环境指针
 * @param cls Java类引用
 * @param orderId 订单ID
 * @return JSON格式跟踪信息: {success: bool, data: {tracking: array, currentStatus: string}}
 */
JNI_METHOD(jstring, trackOrder)
  (JNIEnv *env, jclass cls, jlong orderId);

// ==================== 促销策略接口 ====================

/*
 * Class:     emshop_EmshopNativeInterface
 * Method:    getActivePromotions
 * Signature: ()Ljava/lang/String;
 * Description: 获取活跃的促销活动
 * 
 * @param env JNI环境指针
 * @param cls Java类引用
 * @return JSON格式促销活动列表: {success: bool, data: {promotions: array}}
 */
JNI_METHOD(jstring, getActivePromotions)
  (JNIEnv *env, jclass cls);

/*
 * Class:     emshop_EmshopNativeInterface
 * Method:    createPromotion
 * Signature: (Ljava/lang/String;)Ljava/lang/String;
 * Description: 创建促销活动
 * 
 * @param env JNI环境指针
 * @param cls Java类引用
 * @param jsonPromotion JSON格式促销活动信息
 * @return JSON格式创建结果: {success: bool, message: string, data: {promotionId: long}}
 */
JNI_METHOD(jstring, createPromotion)
  (JNIEnv *env, jclass cls, jstring jsonPromotion);

/*
 * Class:     emshop_EmshopNativeInterface
 * Method:    calculateDiscount
 * Signature: (JJLjava/lang/String;)Ljava/lang/String;
 * Description: 计算折扣
 * 
 * @param env JNI环境指针
 * @param cls Java类引用
 * @param userId 用户ID
 * @param productId 商品ID
 * @param promoCode 促销代码
 * @return JSON格式折扣信息: {success: bool, data: {discount: double, finalPrice: double}}
 */
JNI_METHOD(jstring, calculateDiscount)
  (JNIEnv *env, jclass cls, jlong userId, jlong productId, jstring promoCode);

/*
 * Class:     emshop_EmshopNativeInterface
 * Method:    applyCoupon
 * Signature: (JLjava/lang/String;)Ljava/lang/String;
 * Description: 应用优惠券
 * 
 * @param env JNI环境指针
 * @param cls Java类引用
 * @param userId 用户ID
 * @param couponCode 优惠券代码
 * @return JSON格式应用结果: {success: bool, message: string, data: {discountAmount: double}}
 */
JNI_METHOD(jstring, applyCoupon)
  (JNIEnv *env, jclass cls, jlong userId, jstring couponCode);

// ==================== 售后服务接口 ====================

/*
 * Class:     emshop_EmshopNativeInterface
 * Method:    createAfterSaleRequest
 * Signature: (JJLjava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
 * Description: 创建售后请求
 * 
 * @param env JNI环境指针
 * @param cls Java类引用
 * @param userId 用户ID
 * @param orderId 订单ID
 * @param type 售后类型（"return", "exchange", "repair"）
 * @param reason 售后原因
 * @param jsonDetails JSON格式详细信息
 * @return JSON格式创建结果: {success: bool, message: string, data: {requestId: long}}
 */
JNI_METHOD(jstring, createAfterSaleRequest)
  (JNIEnv *env, jclass cls, jlong userId, jlong orderId, jstring type, jstring reason, jstring jsonDetails);

/*
 * Class:     emshop_EmshopNativeInterface
 * Method:    getAfterSaleRequests
 * Signature: (J)Ljava/lang/String;
 * Description: 获取售后请求列表
 * 
 * @param env JNI环境指针
 * @param cls Java类引用
 * @param userId 用户ID
 * @return JSON格式售后请求列表: {success: bool, data: {requests: array}}
 */
JNI_METHOD(jstring, getAfterSaleRequests)
  (JNIEnv *env, jclass cls, jlong userId);

/*
 * Class:     emshop_EmshopNativeInterface
 * Method:    processAfterSaleRequest
 * Signature: (JLjava/lang/String;Ljava/lang/String;)Ljava/lang/String;
 * Description: 处理售后请求（管理员功能）
 * 
 * @param env JNI环境指针
 * @param cls Java类引用
 * @param requestId 请求ID
 * @param action 处理动作（"approve", "reject", "complete"）
 * @param note 处理备注
 * @return JSON格式处理结果: {success: bool, message: string}
 */
JNI_METHOD(jstring, processAfterSaleRequest)
  (JNIEnv *env, jclass cls, jlong requestId, jstring action, jstring note);

// ==================== UI主题系统接口 ====================

/*
 * Class:     emshop_EmshopNativeInterface
 * Method:    getAvailableThemes
 * Signature: ()Ljava/lang/String;
 * Description: 获取可用主题
 * 
 * @param env JNI环境指针
 * @param cls Java类引用
 * @return JSON格式主题列表: {success: bool, data: {themes: array}}
 */
JNI_METHOD(jstring, getAvailableThemes)
  (JNIEnv *env, jclass cls);

/*
 * Class:     emshop_EmshopNativeInterface
 * Method:    setUserTheme
 * Signature: (JLjava/lang/String;)Ljava/lang/String;
 * Description: 设置用户主题
 * 
 * @param env JNI环境指针
 * @param cls Java类引用
 * @param userId 用户ID
 * @param themeName 主题名称
 * @return JSON格式设置结果: {success: bool, message: string}
 */
JNI_METHOD(jstring, setUserTheme)
  (JNIEnv *env, jclass cls, jlong userId, jstring themeName);

/*
 * Class:     emshop_EmshopNativeInterface
 * Method:    getUserTheme
 * Signature: (J)Ljava/lang/String;
 * Description: 获取用户主题
 * 
 * @param env JNI环境指针
 * @param cls Java类引用
 * @param userId 用户ID
 * @return JSON格式主题信息: {success: bool, data: {themeName: string, themeSettings: object}}
 */
JNI_METHOD(jstring, getUserTheme)
  (JNIEnv *env, jclass cls, jlong userId);

// ==================== 并发控制接口（限量商品处理） ====================

/*
 * Class:     emshop_EmshopNativeInterface
 * Method:    acquireProductLock
 * Signature: (JJI)Ljava/lang/String;
 * Description: 获取商品锁（用于秒杀等场景）
 * 
 * @param env JNI环境指针
 * @param cls Java类引用
 * @param productId 商品ID
 * @param userId 用户ID
 * @param quantity 数量
 * @return JSON格式锁定结果: {success: bool, message: string, data: {lockId: string, expiresAt: string}}
 */
JNI_METHOD(jstring, acquireProductLock)
  (JNIEnv *env, jclass cls, jlong productId, jlong userId, jint quantity);

/*
 * Class:     emshop_EmshopNativeInterface
 * Method:    releaseProductLock
 * Signature: (JJ)Ljava/lang/String;
 * Description: 释放商品锁
 * 
 * @param env JNI环境指针
 * @param cls Java类引用
 * @param productId 商品ID
 * @param userId 用户ID
 * @return JSON格式释放结果: {success: bool, message: string}
 */
JNI_METHOD(jstring, releaseProductLock)
  (JNIEnv *env, jclass cls, jlong productId, jlong userId);

/*
 * Class:     emshop_EmshopNativeInterface
 * Method:    getProductLockStatus
 * Signature: (J)Ljava/lang/String;
 * Description: 获取商品锁状态
 * 
 * @param env JNI环境指针
 * @param cls Java类引用
 * @param productId 商品ID
 * @return JSON格式锁状态: {success: bool, data: {isLocked: bool, lockedBy: long, lockedAt: string, expiresAt: string}}
 */
JNI_METHOD(jstring, getProductLockStatus)
  (JNIEnv *env, jclass cls, jlong productId);

/*
 * Class:     emshop_EmshopNativeInterface
 * Method:    setProductLimitQuantity
 * Signature: (JI)Ljava/lang/String;
 * Description: 设置商品限量
 * 
 * @param env JNI环境指针
 * @param cls Java类引用
 * @param productId 商品ID
 * @param limitQuantity 限量数量（每用户）
 * @return JSON格式设置结果: {success: bool, message: string}
 */
JNI_METHOD(jstring, setProductLimitQuantity)
  (JNIEnv *env, jclass cls, jlong productId, jint limitQuantity);

// ==================== 数据分析接口 ====================

/*
 * Class:     emshop_EmshopNativeInterface
 * Method:    getSalesStatistics
 * Signature: (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
 * Description: 获取销售统计
 * 
 * @param env JNI环境指针
 * @param cls Java类引用
 * @param startDate 开始日期（YYYY-MM-DD格式）
 * @param endDate 结束日期（YYYY-MM-DD格式）
 * @return JSON格式销售统计: {success: bool, data: {totalSales: double, orderCount: int, productStats: array}}
 */
JNI_METHOD(jstring, getSalesStatistics)
  (JNIEnv *env, jclass cls, jstring startDate, jstring endDate);

/*
 * Class:     emshop_EmshopNativeInterface
 * Method:    getUserBehaviorAnalysis
 * Signature: (J)Ljava/lang/String;
 * Description: 获取用户行为分析
 * 
 * @param env JNI环境指针
 * @param cls Java类引用
 * @param userId 用户ID
 * @return JSON格式行为分析: {success: bool, data: {visitCount: int, purchaseHistory: array, preferences: object}}
 */
JNI_METHOD(jstring, getUserBehaviorAnalysis)
  (JNIEnv *env, jclass cls, jlong userId);

/*
 * Class:     emshop_EmshopNativeInterface
 * Method:    getPopularProducts
 * Signature: (I)Ljava/lang/String;
 * Description: 获取热销商品
 * 
 * @param env JNI环境指针
 * @param cls Java类引用
 * @param topN 前N名
 * @return JSON格式热销商品: {success: bool, data: {products: array}}
 */
JNI_METHOD(jstring, getPopularProducts)
  (JNIEnv *env, jclass cls, jint topN);

// ==================== 用户权限接口 ====================

/*
 * Class:     emshop_EmshopNativeInterface
 * Method:    getUserRoles
 * Signature: (J)Ljava/lang/String;
 * Description: 获取用户角色
 * 
 * @param env JNI环境指针
 * @param cls Java类引用
 * @param userId 用户ID
 * @return JSON格式用户角色: {success: bool, data: {roles: array, permissions: array}}
 */
JNI_METHOD(jstring, getUserRoles)
  (JNIEnv *env, jclass cls, jlong userId);

/*
 * Class:     emshop_EmshopNativeInterface
 * Method:    setUserRole
 * Signature: (JLjava/lang/String;)Ljava/lang/String;
 * Description: 设置用户角色
 * 
 * @param env JNI环境指针
 * @param cls Java类引用
 * @param userId 用户ID
 * @param role 角色名（"admin", "user", "vip", "manager"）
 * @return JSON格式设置结果: {success: bool, message: string}
 */
JNI_METHOD(jstring, setUserRole)
  (JNIEnv *env, jclass cls, jlong userId, jstring role);

/*
 * Class:     emshop_EmshopNativeInterface
 * Method:    checkUserPermission
 * Signature: (JLjava/lang/String;)Ljava/lang/String;
 * Description: 检查用户权限
 * 
 * @param env JNI环境指针
 * @param cls Java类引用
 * @param userId 用户ID
 * @param permission 权限名
 * @return JSON格式权限检查结果: {success: bool, data: {hasPermission: bool}}
 */
JNI_METHOD(jstring, checkUserPermission)
  (JNIEnv *env, jclass cls, jlong userId, jstring permission);

// ==================== 支付系统接口 ====================

/*
 * Class:     emshop_EmshopNativeInterface
 * Method:    processPayment
 * Signature: (JLjava/lang/String;DLjava/lang/String;)Ljava/lang/String;
 * Description: 处理支付
 * 
 * @param env JNI环境指针
 * @param cls Java类引用
 * @param orderId 订单ID
 * @param paymentMethod 支付方式（"alipay", "wechat", "unionpay", "cash"）
 * @param amount 支付金额
 * @param jsonPaymentDetails JSON格式支付详情
 * @return JSON格式支付结果: {success: bool, message: string, data: {transactionId: string}}
 */
JNI_METHOD(jstring, processPayment)
  (JNIEnv *env, jclass cls, jlong orderId, jstring paymentMethod, jdouble amount, jstring jsonPaymentDetails);

/*
 * Class:     emshop_EmshopNativeInterface
 * Method:    getPaymentStatus
 * Signature: (J)Ljava/lang/String;
 * Description: 获取支付状态
 * 
 * @param env JNI环境指针
 * @param cls Java类引用
 * @param orderId 订单ID
 * @return JSON格式支付状态: {success: bool, data: {status: string, paidAmount: double, paymentTime: string}}
 */
JNI_METHOD(jstring, getPaymentStatus)
  (JNIEnv *env, jclass cls, jlong orderId);

/*
 * Class:     emshop_EmshopNativeInterface
 * Method:    refundPayment
 * Signature: (JDLjava/lang/String;)Ljava/lang/String;
 * Description: 退款处理
 * 
 * @param env JNI环境指针
 * @param cls Java类引用
 * @param orderId 订单ID
 * @param amount 退款金额
 * @param reason 退款原因
 * @return JSON格式退款结果: {success: bool, message: string, data: {refundId: string}}
 */
JNI_METHOD(jstring, refundPayment)
  (JNIEnv *env, jclass cls, jlong orderId, jdouble amount, jstring reason);

// ==================== 系统监控接口 ====================

/*
 * Class:     emshop_EmshopNativeInterface
 * Method:    getServerStatus
 * Signature: ()Ljava/lang/String;
 * Description: 获取系统状态
 * 
 * @param env JNI环境指针
 * @param cls Java类引用
 * @return JSON格式系统状态: {success: bool, data: {uptime: long, cpu: double, memory: object, connections: int}}
 */
JNI_METHOD(jstring, getServerStatus)
  (JNIEnv *env, jclass cls);

/*
 * Class:     emshop_EmshopNativeInterface
 * Method:    getSystemLogs
 * Signature: (Ljava/lang/String;II)Ljava/lang/String;
 * Description: 获取系统日志
 * 
 * @param env JNI环境指针
 * @param cls Java类引用
 * @param logLevel 日志级别（"DEBUG", "INFO", "WARN", "ERROR", "ALL"）
 * @param page 页码
 * @param pageSize 每页数量
 * @return JSON格式系统日志: {success: bool, data: {logs: array, total: int}}
 */
JNI_METHOD(jstring, getSystemLogs)
  (JNIEnv *env, jclass cls, jstring logLevel, jint page, jint pageSize);

/*
 * Class:     emshop_EmshopNativeInterface
 * Method:    getSystemMetrics
 * Signature: ()Ljava/lang/String;
 * Description: 获取系统指标
 * 
 * @param env JNI环境指针
 * @param cls Java类引用
 * @return JSON格式系统指标: {success: bool, data: {performance: object, database: object, cache: object}}
 */
JNI_METHOD(jstring, getSystemMetrics)
  (JNIEnv *env, jclass cls);

/*
 * Class:     emshop_EmshopNativeInterface
 * Method:    getActiveConnections
 * Signature: ()Ljava/lang/String;
 * Description: 获取活跃连接
 * 
 * @param env JNI环境指针
 * @param cls Java类引用
 * @return JSON格式活跃连接信息: {success: bool, data: {connections: array, totalCount: int}}
 */
JNI_METHOD(jstring, getActiveConnections)
  (JNIEnv *env, jclass cls);

// ==================== 数据库操作接口 ====================

/*
 * Class:     emshop_EmshopNativeInterface
 * Method:    executeDMLQuery
 * Signature: (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
 * Description: 执行DML查询（INSERT, UPDATE, DELETE）
 * 
 * @param env JNI环境指针
 * @param cls Java类引用
 * @param sql SQL语句
 * @param jsonParameters JSON格式参数
 * @return JSON格式执行结果: {success: bool, message: string, data: {affectedRows: int}}
 */
JNI_METHOD(jstring, executeDMLQuery)
  (JNIEnv *env, jclass cls, jstring sql, jstring jsonParameters);

/*
 * Class:     emshop_EmshopNativeInterface
 * Method:    executeSelectQuery
 * Signature: (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
 * Description: 执行SELECT查询
 * 
 * @param env JNI环境指针
 * @param cls Java类引用
 * @param sql SQL语句
 * @param jsonParameters JSON格式参数
 * @return JSON格式查询结果: {success: bool, data: {rows: array, count: int}}
 */
JNI_METHOD(jstring, executeSelectQuery)
  (JNIEnv *env, jclass cls, jstring sql, jstring jsonParameters);

/*
 * Class:     emshop_EmshopNativeInterface
 * Method:    getDatabaseSchema
 * Signature: ()Ljava/lang/String;
 * Description: 获取数据库模式
 * 
 * @param env JNI环境指针
 * @param cls Java类引用
 * @return JSON格式数据库模式: {success: bool, data: {tables: array, indexes: array, constraints: array}}
 */
JNI_METHOD(jstring, getDatabaseSchema)
  (JNIEnv *env, jclass cls);

/*
 * Class:     emshop_EmshopNativeInterface
 * Method:    executeBatch
 * Signature: (Ljava/lang/String;)Ljava/lang/String;
 * Description: 批量执行查询
 * 
 * @param env JNI环境指针
 * @param cls Java类引用
 * @param jsonBatchQueries JSON格式批量查询: {queries: array}
 * @return JSON格式批量执行结果: {success: bool, data: {results: array, totalAffected: int}}
 */
JNI_METHOD(jstring, executeBatch)
  (JNIEnv *env, jclass cls, jstring jsonBatchQueries);

// ==================== 缓存管理接口 ====================

/*
 * Class:     emshop_EmshopNativeInterface
 * Method:    clearCache
 * Signature: (Ljava/lang/String;)Ljava/lang/String;
 * Description: 清理缓存
 * 
 * @param env JNI环境指针
 * @param cls Java类引用
 * @param cacheType 缓存类型（"all", "products", "users", "sessions", "orders"）
 * @return JSON格式清理结果: {success: bool, message: string, data: {clearedItems: int}}
 */
JNI_METHOD(jstring, clearCache)
  (JNIEnv *env, jclass cls, jstring cacheType);

/*
 * Class:     emshop_EmshopNativeInterface
 * Method:    getCacheStats
 * Signature: ()Ljava/lang/String;
 * Description: 获取缓存统计
 * 
 * @param env JNI环境指针
 * @param cls Java类引用
 * @return JSON格式缓存统计: {success: bool, data: {hitRate: double, itemCount: int, memory: object}}
 */
JNI_METHOD(jstring, getCacheStats)
  (JNIEnv *env, jclass cls);

// ==================== 辅助函数声明（供内部实现使用） ====================

/*
 * 辅助函数：将Java字符串转换为C++字符串
 */
const char* jstring_to_cstring(JNIEnv *env, jstring jstr);

/*
 * 辅助函数：创建Java字符串
 */
jstring create_jstring(JNIEnv *env, const char* str);

/*
 * 辅助函数：释放Java字符串
 */
void release_jstring(JNIEnv *env, jstring jstr, const char* cstr);

/*
 * 辅助函数：创建成功响应JSON
 */
jstring create_success_response(JNIEnv *env, const char* data, const char* message = "操作成功");

/*
 * 辅助函数：创建错误响应JSON
 */
jstring create_error_response(JNIEnv *env, const char* message, int error_code = 1001);

/*
 * 辅助函数：记录JNI调用日志
 */
void log_jni_call(const char* method_name, const char* parameters = "");

#ifdef __cplusplus
}
#endif

#endif /* _Included_emshop_EmshopNativeInterface */
