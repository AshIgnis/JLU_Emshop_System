# JLU电商系统 - 8周开发计划

## 🎯 总体目标
在8周内完成一个功能完整的电商系统，包含C++服务端、Qt客户端和Java Web管理后台。

## ⏰ 8周开发时间线

### 第1周：环境搭建与基础准备
**时间：第1周（7天）**

#### 开发任务：
- [ ] 安装开发环境
  - Visual Studio 2022 (C++)
  - Qt 6.5+ LTS + Qt Creator
  - JDK 17+ + IntelliJ IDEA
  - MySQL 8.0+
  - Git + Postman

- [ ] 数据库设计与创建
  - 创建emshop数据库
  - 设计并创建核心表（users, products, orders, order_items, cart）
  - 插入测试数据（10个用户，50个商品）

- [ ] 技术学习重点
  - C++ Socket编程基础
  - Qt信号槽机制
  - JSON数据处理

#### 学习资料：
- Qt官方文档入门教程
- C++ Socket编程教程
- MySQL基础操作 2025.8.28 -

#### 验收标准：
- 所有开发工具正常运行
- 数据库创建完成并有测试数据
- 能运行简单的Qt Hello World程序

---

### 第2周：C++服务端核心框架
**时间：第2周（7天）**

#### 开发任务：
- [ ] TCP服务器基础框架
  ```cpp
  class TCPServer {
      // 监听端口8888
      // 接受客户端连接
      // 基本消息收发
  };
  ```

- [ ] 消息协议设计
  - 定义JSON消息格式
  - 实现消息解析器
  - 错误处理机制

- [ ] 数据库连接模块
  - MySQL C++连接器配置
  - 基础CRUD操作封装
  - 连接池管理（简化版）

#### 核心功能实现：
- 用户登录验证
- 商品列表查询
- 基础错误处理

#### 验收标准：
- TCP服务器能接受连接
- 能处理JSON格式消息
- 用户登录功能正常
- 商品数据能从数据库获取

---

### 第3周：Qt客户端核心界面
**时间：第3周（7天）**

#### 开发任务：
- [ ] 主要界面设计
  - 登录窗口（LoginWindow）
  - 主窗口（MainWindow）
  - 商品浏览界面（ProductView）
  - 购物车界面（CartWindow）

- [ ] 网络通信模块
  ```cpp
  class NetworkManager : public QObject {
      // TCP连接管理
      // JSON消息发送/接收
      // 信号槽事件处理
  };
  ```

- [ ] 基础功能实现
  - 用户登录/注册
  - 商品列表显示
  - 商品搜索过滤

#### 界面要求：
- 简洁美观的布局
- 响应式设计
- 基础的用户交互

#### 验收标准：
- 登录界面能连接服务器
- 商品列表正常显示
- 界面切换流畅
- 网络异常处理正常

---

### 第4周：核心业务功能完善
**时间：第4周（7天）**

#### C++服务端任务：
- [ ] 完善业务逻辑
  - 购物车管理（添加、删除、修改）
  - 订单创建和管理
  - 库存管理
  - 用户权限控制

- [ ] 并发处理
  - 多线程客户端处理
  - 数据库操作线程安全
  - 简单的锁机制

#### Qt客户端任务：
- [ ] 购物车功能
  - 商品添加到购物车
  - 购物车商品管理
  - 数量修改和删除

- [ ] 订单功能
  - 订单创建流程
  - 订单历史查看
  - 订单状态显示

#### 验收标准：
- 完整的购物流程（浏览→加购物车→下单）
- 多用户同时操作不冲突
- 数据一致性保证

---

### 第5周：Java Web服务开发
**时间：第5周（7天）**

#### 开发任务：
- [ ] Spring Boot项目搭建
  - 使用Spring Initializr创建项目
  - 配置MySQL连接
  - 设置基础项目结构

- [ ] 核心API开发
  ```java
  @RestController
  @RequestMapping("/api")
  public class ProductController {
      // 商品CRUD API
      // 分页查询
      // 搜索功能
  }
  ```

- [ ] 实体类和数据访问层
  - JPA实体类映射
  - Repository接口
  - 基础业务Service

#### API接口设计：
- GET /api/products - 商品列表
- POST /api/products - 添加商品
- PUT /api/products/{id} - 更新商品
- DELETE /api/products/{id} - 删除商品
- GET /api/orders - 订单列表
- GET /api/users - 用户列表

#### 验收标准：
- 所有API接口正常工作
- 支持分页和搜索
- 数据验证和错误处理完善

---

### 第6周：Web管理后台开发
**时间：第6周（7天）**

#### 开发任务：
- [ ] 简单HTML管理界面
  - 使用Bootstrap框架
  - 商品管理页面
  - 订单管理页面
  - 用户管理页面

- [ ] JavaScript前端交互
  - AJAX请求处理
  - 数据表格展示
  - 表单验证
  - 基础的增删改查操作

- [ ] 系统集成
  - C++服务端调用Java API
  - 数据同步机制
  - 状态同步

#### 界面功能：
- 商品管理（添加、编辑、删除、上下架）
- 订单管理（查看、状态更新）
- 用户管理（查看、禁用/启用）
- 数据统计（简单图表）

#### 验收标准：
- Web界面操作正常
- 数据实时更新
- 基础的权限控制

---

### 第7周：系统优化与完善
**时间：第7周（7天）**

#### 优化任务：
- [ ] 性能优化
  - 数据库查询优化
  - 缓存机制（简单版）
  - 网络通信优化
  - 内存使用优化

- [ ] 功能完善
  - 促销功能（打折、优惠券）
  - 售后服务（退货、退款）
  - 用户评价系统
  - 商品分类管理

- [ ] 异常处理
  - 网络断线重连
  - 数据库连接异常
  - 用户输入验证
  - 系统错误日志

#### 用户体验优化：
- 界面美化和动画
- 操作提示和反馈
- 快捷键支持
- 主题切换功能

#### 验收标准：
- 系统运行稳定，无明显bug
- 用户操作流畅自然
- 异常情况处理得当

---

### 第8周：测试、部署与文档
**时间：第8周（7天）**

#### 测试任务：
- [ ] 功能测试
  - 用户注册登录
  - 商品浏览和搜索
  - 购物车操作
  - 订单创建和管理
  - 管理后台功能

- [ ] 压力测试
  - 并发用户测试（10-50个模拟用户）
  - 数据库性能测试
  - 网络通信压力测试

- [ ] 集成测试
  - C++服务端稳定性
  - Qt客户端兼容性
  - Java Web服务响应性
  - 数据一致性验证

#### 部署准备：
- [ ] 部署文档编写
- [ ] 安装包制作
- [ ] 数据库脚本整理
- [ ] 用户使用手册

#### 项目文档：
- [ ] 系统架构说明
- [ ] API接口文档
- [ ] 数据库设计文档
- [ ] 用户操作指南

#### 验收标准：
- 完整系统能正常部署运行
- 所有核心功能测试通过
- 文档完整清晰

---

## 📋 每周工作量分配

### 时间分配建议：
- **C++服务端**：40%时间（约3.2周）
- **Qt客户端**：35%时间（约2.8周）
- **Java Web服务**：20%时间（约1.6周）
- **测试和优化**：5%时间（约0.4周）

### 每日工作安排：
- **工作日**：每天6-8小时开发时间
- **周末**：每天4-6小时开发时间
- **总计**：每周约40-50小时

---

## 🎯 关键里程碑

### 第2周末：
✅ C++服务端基础框架完成，支持用户登录

### 第3周末：
✅ Qt客户端基础界面完成，能与服务端通信

### 第4周末：
✅ 完整购物流程打通（浏览→购物车→下单）

### 第5周末：
✅ Java Web API全部开发完成

### 第6周末：
✅ Web管理后台功能完整

### 第7周末：
✅ 系统优化完成，功能基本完善

### 第8周末：
✅ 项目完成，可以演示和交付

---

## 🚨 风险控制

### 高风险项目：
1. **C++网络编程** - 如果不熟悉，需要额外学习时间
2. **多线程并发** - 可能需要简化实现
3. **系统集成** - 三个系统对接可能出现兼容性问题

### 应对策略：
1. **技术降级**：如果某项技术难度太大，采用简化方案
2. **功能裁剪**：优先完成核心功能，次要功能可以简化
3. **时间缓冲**：每周预留1天时间处理突发问题

### 最小可行产品（MVP）：
- 用户登录注册 ✅
- 商品浏览和搜索 ✅
- 购物车基础功能 ✅
- 简单下单流程 ✅
- 基础管理后台 ✅

---

## 📚 学习资源优先级

### 必须掌握（第1-2周）：
1. C++ Socket编程基础
2. Qt Widgets基本控件使用
3. JSON数据处理
4. MySQL基础操作

### 重要掌握（第3-4周）：
1. Qt信号槽机制
2. 多线程编程基础
3. Spring Boot快速入门
4. RESTful API设计

### 可选掌握（第5-8周）：
1. 系统优化技巧
2. 前端美化技术
3. 高级数据库操作
4. 软件测试方法

---

## 💡 成功建议

1. **每天记录进度**：写开发日志，记录问题和解决方案
2. **优先核心功能**：确保主要功能先完成，再考虑细节
3. **定期备份代码**：每天提交Git，避免代码丢失
4. **及时求助**：遇到问题及时查资料或询问
5. **保持节奏**：不要因为一个问题卡太久，适当跳过或简化

## 📞 紧急情况处理

如果某周进度严重滞后，按以下优先级调整：
1. **保证C++服务端基础功能**
2. **保证Qt客户端基本界面**
3. **简化Java Web服务功能**
4. **Web管理后台可以做成静态页面**

记住：完成一个功能相对完整的系统比做一个功能很多但都不完整的系统更有价值！

---

## 📈 进度跟踪表

| 周次 | 计划任务 | 完成状态 | 遇到问题 | 解决方案 | 下周调整 |
|------|----------|----------|----------|----------|----------|
| 第1周 | 环境搭建+数据库 | ⭕ | | | |
| 第2周 | C++服务端框架 | ⭕ | | | |
| 第3周 | Qt客户端界面 | ⭕ | | | |
| 第4周 | 核心业务功能 | ⭕ | | | |
| 第5周 | Java Web API | ⭕ | | | |
| 第6周 | Web管理后台 | ⭕ | | | |
| 第7周 | 系统优化 | ⭕ | | | |
| 第8周 | 测试部署 | ⭕ | | | |

---

【后续开发建议】
1. 编写并完善客户端和服务器端主程序（如Main类），实现Socket通信、协议封装与解析，调用接口完成业务流程。
2. 设计和实现通信协议（如消息格式、请求/响应结构），确保客户端与服务器端数据交互顺畅。
3. 编写单元测试和集成测试，验证每个接口和整体业务流程的正确性。
4. 完善异常处理和日志记录，提升系统健壮性和可维护性。
5. 优化并发处理和性能，模拟多用户场景进行压力测试。
6. 完善用户界面（如命令行、GUI等），提升用户体验。
7. 编写项目文档，包括接口说明、部署说明、使用手册等。
8. 部署和上线，进行实际环境测试。


**祝您开发顺利！记住：代码能跑起来比完美更重要！** 🚀
